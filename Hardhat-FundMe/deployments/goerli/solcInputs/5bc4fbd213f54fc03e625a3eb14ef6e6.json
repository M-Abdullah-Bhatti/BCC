{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "// Get funds from user\r\n// Withdraw funds\r\n// Set a minimum funding value is USD\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./PriceConverter.sol\";\r\n\r\n// to make gas efficient we use constant and immutable\r\n// immutable is used for the variable which are used in constructor\r\n\r\nerror NotOwner();\r\n\r\ncontract FundMe {\r\n    using PriceConverter for uint256;\r\n\r\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\r\n    address[] public funders;\r\n    mapping(address => uint256) public addressToAmountFunded;\r\n\r\n    // this tells that only owner can do:\r\n    address public immutable i_owner;\r\n\r\n    AggregatorV3Interface public priceFeed;\r\n\r\n    constructor(address priceFeedAddress) {\r\n        i_owner = msg.sender;\r\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\r\n    }\r\n\r\n    function fund() public payable {\r\n        // we want to able to set a minimum funding value is USD\r\n        // 1. How do we sen eth to this contract?\r\n        require(msg.value.getConversionRate(priceFeed) >= 1e18, \"not enough\"); //1e18 = 1 * 10 ** 18\r\n        funders.push(msg.sender);\r\n        addressToAmountFunded[msg.sender] = msg.value;\r\n    }\r\n\r\n    function Withdraw() public onlyOwner {\r\n        for (uint256 funderIndex; funderIndex < funders.length; funderIndex++) {\r\n            address funder = funders[funderIndex];\r\n            addressToAmountFunded[funder] = 0;\r\n        }\r\n        // reset the array:\r\n        funders = new address[](0);\r\n        // to withdraw payment\r\n        (bool callSuccess, ) = payable(msg.sender).call{\r\n            value: address(this).balance\r\n        }(\"\");\r\n        require(callSuccess, \"send fail\");\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        //  require(msg.sender == i_owner, \"sender is ot owner!\");\r\n        // in order to store gas:\r\n        if (msg.sender != i_owner) {\r\n            revert NotOwner();\r\n        }\r\n        _;\r\n    }\r\n\r\n    receive() external payable {\r\n        fund();\r\n    }\r\n\r\n    fallback() external payable {\r\n        fund();\r\n    }\r\n\r\n    // What happen if someone send this contract ETH without calling fund function:\r\n    // 1. recieve\r\n    // 2. fallback\r\n\r\n    // we can send native bcc currency in 3 ways:\r\n    // 1. tranfer:\r\n    // payable(msg.sender).tranfer(address(this).balance);\r\n    // msg.sender = address\r\n    // payable(msg.sender) = payable address\r\n\r\n    // 2. send\r\n    //  bool sendSuccess = payable(msg.sender).send(address(this).balance);\r\n    // require(sendSuccess, \"send fail\");\r\n\r\n    // 3. call\r\n    // (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\"\");\r\n    // require(sendSuccess, \"send fail\");\r\n}\r\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\nlibrary PriceConverter {\r\n    // This function tells etherium price in USD\r\n    function getPrice(AggregatorV3Interface priceFeed)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        // As we are interacting outside our project\r\n        // ABI\r\n        // Address \t0x8A753747A1Fa494EC906cE90E9f37563A8AF630e  -->get it from ethereum data feed\r\n\r\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\r\n        //     //    Goerli-->  0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\r\n        //     0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\r\n        // );\r\n\r\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\r\n        // price of ETH in term of USD\r\n        // 3000.00000000\r\n        return uint256(answer * 1e10); // 1*10 **10\r\n        // this will give 300000000000\r\n    }\r\n\r\n    // function getVersion() internal view returns (uint256) {\r\n    //     AggregatorV3Interface priceFeed = AggregatorV3Interface(\r\n    //         0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\r\n    //     );\r\n    //     return priceFeed.version();\r\n    // }\r\n\r\n    // this function will convert msg.value(some eth value) amount in USD\r\n    function getConversionRate(\r\n        uint256 ethAmount,\r\n        AggregatorV3Interface priceFeed\r\n    ) internal view returns (uint256) {\r\n        uint256 ethPrice = getPrice(priceFeed);\r\n        // 3000_000000000000000000\r\n        // 1_000000000000000000\r\n\r\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\r\n        // 2999e21\r\n        return ethAmountInUsd;\r\n    }\r\n}\r\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}